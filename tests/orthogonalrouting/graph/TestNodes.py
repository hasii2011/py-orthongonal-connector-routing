
from typing import cast

from unittest import TestSuite
from unittest import main as unitTestMain

from copy import deepcopy

from codeallybasic.UnitTestBase import UnitTestBase

from orthogonalrouting.graph.Node import Node
from orthogonalrouting.graph.Nodes import Nodes
from orthogonalrouting.graph.interfaces.INode import INode


class TestNodes(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 17 March 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testAddRange(self):
        nodes: Nodes = Nodes(
            [
                Node(x=100, y=300), Node(x=100, y=200), Node(x=100, y=100)
            ]
        )

        additionalNodes: Nodes = Nodes(
            [
                Node(x=10, y=30), Node(x=20, y=20), Node(x=666, y=666)
            ]
        )

        nodes.addRange(nodes=additionalNodes)

        self.assertEqual(6, len(nodes), 'Nodes not added')
        originalLastNode: Node = additionalNodes[-1]
        extendedLastNode: Node = nodes[-1]

        self.assertEqual(originalLastNode, extendedLastNode, 'Was not appended')

    def testNodeSorting(self):

        nodes: Nodes = Nodes(
            [
                Node(x=100, y=300), Node(x=100, y=200), Node(x=100, y=100)
            ]
        )
        nodes.sort(key=self._nodeSort)

        orderedNodes: Nodes = deepcopy(nodes)

        nodesId:        str = f'{hex(id(nodes))}'
        orderedNodesId: str = f'{hex(id(orderedNodes))}'

        self.logger.info(f'{nodesId=} {orderedNodesId=}')

        firstNode: INode = orderedNodes[0]
        self.assertEqual(100, firstNode.y, 'First node not correctly sorted')

        lastNode: INode = orderedNodes[-1]
        self.assertEqual(300, lastNode.y, 'Last node not correctly sorted')

        orderedNodes = cast(Nodes, orderedNodes[:-1])
        self.assertEqual(2, len(orderedNodes), 'Did not slice last one')

    def testListComprehension(self):

        nodes: Nodes = Nodes(
            [
                Node(x=100, y=100), Node(x=100, y=200), Node(x=100, y=300), Node(x=100, y=400)
            ]
        )
        # noinspection PyChainedComparisons
        subNodes: Nodes = cast(Nodes, [node for node in nodes if node.y >= 200 and node.y <= 300])

        self.logger.info(f'{subNodes=}')

    def _nodeSort(self, e: INode):
        return e.y


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestNodes))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
